---
name: Trigger Deployment
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:

  # NOTE: deployment will depend on what platform you are deploying to, but these are some common ones we in RND use (either of the following):

  ############### COOLIFY (selfhosted) ################
  deploy-dev-staging-coolify:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
    steps:
      # NOTE: Needs COOLIFY_WEBHOOK and COOLIFY_TOKEN
      # - You need to create a Coolify API Token and add it to your GitHub repository secrets.
      # - Get the proper webhook endpoint from Coolify (Your resource / Webhook menu) and add it to your GitHub repository secrets.
      - name: Deploy to Coolify
        run: |
          curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'

  deploy-prod-coolify:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
    steps:
      # NOTE: Needs COOLIFY_WEBHOOK and COOLIFY_TOKEN
      # - You need to create a Coolify API Token and add it to your GitHub repository secrets.
      # - Get the proper webhook endpoint from Coolify (Your resource / Webhook menu) and add it to your GitHub repository secrets.
      - name: Deploy to Coolify
        run: |
          curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'

  ############## DIGITAL OCEAN's APP PLATFORM ###########
  # deploy-prod-digital-ocean-app-platform:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     - name: Install doctl
  #       run: |
  #         curl -sL https://github.com/digitalocean/doctl/releases/download/v1.99.0/doctl-1.99.0-linux-amd64.tar.gz | tar xz
  #         sudo mv doctl /usr/local/bin
  #     - name: Authenticate doctl
  #       env:
  #         DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #       run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN
  #     - name: Trigger redeploy on App Platform
  #       run: |
  #         doctl apps redeploy ${{ secrets.DO_APP_ID }}

  ############## via SSH to VM (e.g. Droplet, EC2, or any selfhosted machine with SSH access) ###########
  # NOTE: need HOST, USER, and PRIVATE_SSH_KEY as secrets (see Settings -> Actions -> Repository Secrets)
  # requires deploy.sh script (OPTIONAL: compose.yml if using docker compose) for deployment on the VM

  # deploy-prod-ssh:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     - name: Deploy to a VM via SSH
  #       uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER || 'root' }}
  #         key: ${{ secrets.PRIVATE_SSH_KEY }}
  #         script: |
  #           cd /root
  #           ./deploy.sh
  #     - name: Notify Discord of Deployment
  #       env:
  #         DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  #       run: |
  #         curl -H "Content-Type: application/json" -X POST \
  #           -d "{\"content\": \"ðŸš€ New release deployed: ${{ github.event.release.tag_name }}\"}" \
  #           "$DISCORD_WEBHOOK"

  #################### RAILWAY ####################
  # deploy-prod-railway:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     # NOTE: Needs RAILWAY_TOKEN as a secret
  #     - name: Install Railway CLI
  #       run: npm i -g @railway/cli
  #     - name: Deploy to Railway
  #       env:
  #         RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  #       # The --service flag is optional if you only have one service in your project
  #       run: railway up --service ${{ secrets.RAILWAY_SERVICE_NAME }}

  #################### RENDER #####################
  # deploy-prod-render:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     # NOTE: Needs RENDER_DEPLOY_HOOK as a secret.
  #     # Get this from your service's settings page on Render.
  #     - name: Deploy to Render
  #       run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  #################### NETLIFY ####################
  # NOTE: Netlify is primarily for static sites and serverless functions.
  # This example uses a build hook to trigger a new build and deploy on Netlify.
  # deploy-prod-netlify:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     # NOTE: Needs NETLIFY_BUILD_HOOK as a secret.
  #     # Get this from your site's build & deploy settings on Netlify.
  #     - name: Deploy to Netlify
  #       run: curl -X POST -d '{}' ${{ secrets.NETLIFY_BUILD_HOOK }}

  ################# CLOUDFLARE PAGES ################
  # NOTE: Cloudflare Pages is for deploying static sites.
  # You will need a build step to generate your static assets before deploying.
  # deploy-prod-cloudflare-pages:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     # This is an example build step. Replace with your project's build command.
  #     # - name: Build static site
  #     #   run: npm install && npm run build
  #
  #     - name: Deploy to Cloudflare Pages
  #       uses: cloudflare/pages-action@v1
  #       with:
  #         apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #         accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #         projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }} # e.g., 'my-awesome-site'
  #         directory: 'dist' # The directory of static assets to deploy
  #         # Optional: The branch to associate the deployment with.
  #         # branch: 'main'

  ################# CLOUDFLARE WORKERS ################
  # NOTE: This assumes you have a wrangler.toml file in your repository.
  # deploy-prod-cloudflare-workers:
  #   runs-on: ubuntu-latest
  #   if: ${{ (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') && github.event.workflow_run.conclusion == 'success' }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Install Wrangler CLI
  #       run: npm install -g wrangler
  #
  #     - name: Deploy to Cloudflare Workers
  #       env:
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #       run: wrangler deploy

